var N = null;var searchIndex = {};
searchIndex["sparrow"]={"doc":"RustBoost is an implementation of TMSN for boosting.","items":[[3,"Config","sparrow","Configuration for training and testing with Sparrow",N,N],[12,"training_filename","","File path to the training data",0,N],[12,"num_examples","","Number of training examples",0,N],[12,"num_features","","Number of features",0,N],[12,"range","","Range of the features for creating weak rules",0,N],[12,"positive","","Label for positive examples",0,N],[12,"testing_filename","","File path to the testing data",0,N],[12,"num_testing_examples","","Number of testing examples",0,N],[12,"max_sample_size","","Number of examples to scan for generating heuristic used in Sparrow",0,N],[12,"max_bin_size","","Maximum number of bins for discretizing continous feature values",0,N],[12,"min_gamma","","Minimum value of the \\gamma of the generated tree nodes",0,N],[12,"default_gamma","","Default maximum value of the \\gamma for generating tree nodes",0,N],[12,"max_trials_before_shrink","","Maximum number of examples to scan before shrinking the value of \\gamma",0,N],[12,"min_ess","","Minimum effective sample size for triggering resample",0,N],[12,"num_iterations","","Number of boosting iterations",0,N],[12,"max_leaves","","Maximum number of tree leaves in each boosted tree",0,N],[12,"channel_size","","Maximum number of elements in the channel connecting scanner and sampler",0,N],[12,"buffer_size","","Number of examples in the sample set that needs to be loaded into memory",0,N],[12,"batch_size","","Number of examples to process in each weak rule updates",0,N],[12,"serial_sampling","","Set to true to stop running sampler in the background of the scanner",0,N],[12,"num_examples_per_block","","Number of examples in a block on the stratified binary file",0,N],[12,"disk_buffer_filename","","File name for the stratified binary file",0,N],[12,"num_assigners","","Number of threads for putting examples back to correct strata",0,N],[12,"num_samplers","","Number of threads for sampling examples from strata",0,N],[12,"network","","IP addresses of other machines in the network",0,N],[12,"port","","The network port used for parallel training",0,N],[12,"local_name","","Identifier for the local machine",0,N],[12,"save_process","","Flag for keeping all intermediate models during training (for debugging purpose)",0,N],[12,"save_interval","","Number of iterations between persisting models on disk",0,N],[12,"debug_mode","","Flag for activating debug mode",0,N],[12,"models_table_filename","","(for validation only) the file names of the models to run the validation",0,N],[12,"incremental_testing","","Flag indicating if models are trained incrementally",0,N],[12,"testing_scores_only","","Flag for validation mode, set to true to output raw scores of testing examples, and set to false for printing the validation scores but not raw scores",0,N],[5,"training","","",N,[[["string"]]]],[5,"testing","","",N,[[["string"]]]],[6,"RawTFeature","","",N,N],[6,"TFeature","","",N,N],[6,"TLabel","","",N,N],[6,"RawExample","","",N,N],[6,"Example","","",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",0,[[["__d"]],["result"]]]],"paths":[[3,"Config"]]};
initSearch(searchIndex);
